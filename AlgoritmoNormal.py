import time

# Algoritmo Normal de multiplicacion de matrices#
def multiMatrices(f1, c1, A, f2, c2, B):
    # Preguntamos si se puede multiplicar
    if c1 != f2:
        return []
    else:
        # Multiplicando
        C = [[0]*c2 for _ in range(f1)] # Creando la nueva
                                        # matriz de tama√±o (f1xc2)
        for fil in range(f1):
            for col in range(c1):
                for cant in range(f2):
                    C[fil][col] = (C[fil][col] +
                                (A[fil][cant]*B[cant][col]))
        return C

# ===== Programa Principal ===== #

# Matriz 1
f1 = 16
c1 = 16
A = [[  6,  1, -2, 1, 10, -2,  2, -1,  3,  4,  6,  4, -2,  3,  6,  4],
     [ -2, 1, -2,  1,  2,  4,  7, -2,  7,  0,  1,  8,  7, 10,  9,  7],
     [  9, 4,  4,  1,  2,  8,  9,  8,  8, 10, 10,  6,  0, -2, 10, -2],
     [ 10, 7,  0,  8,  2,  1,  2,  3, -2,  4,  4,  1,  2, 10,  8,  8],
     [ -1, 3,  7,  1,  9,  4,  9,  3,  0,  9,  7, -2,  3, -1,  4,  9],
     [  4, 3,  9,  10, 2,  1,  6,  1, 10,  9,  5,  2,  1, -2,  1,  9],
     [ -2, 0,  1,  8,  7,  9,  5,  7,  9, -2,  9,  4,  7,  0, 10, 10],
     [  7, 8, 10,  0,  3, -2, 10,  8,  8,  3,  3,  6, -1,  1,  9, -2],
     [  7, 2, -1,  3,  7,  1,  4,  8,  1,  9,  5, -2,  9,  3,  3, -1],
     [  5, 0,  8,  2,  3,  3,  1,  6,  3,  6, -1,  3,  1, -2,  8,  9],
     [  7, 1, -1, -2,  5,  2, 10,  6, -1,  0,  2, -1,  4,  9, -2, -2],
     [  4, 7, -2, -2,  5,  4, 10,  2, -2,  9,  2,  5,  9,  7,  7, 10],
     [  7, 8, -1,  8,  4,  5,  6,  5,  9,  3,  3,  4, -2,  5,  0,  3],
     [  5, 5, -1, -1, -2,  5,  3, -2,  9,  0,  9, -2,  1,  2,  5, -2],
     [  9, 0,  3,  9,  8,  3,  5, -2,  7,  8,  4,  8,  6,  5,  8,  6],
     [  1, 5,  0,  3,  7, -2, -1,  4,  1, 10,  2,  8, -2,  6,  7, -2]]
# Matriz 2
f2 = 16
c2 = 16
B = [[ 0,  2,  0,  5,  7,  6,  0,  5,  0,  1,  6,  2,  0,  5, -1,  7],
     [-1,  2,  1,  1,  1,  2,  0,  5,  6,  5,  0, -1, -2,  7,  5, -1],
     [ 2, -2,  1,  7,  6, -2, -1,  7,  4, -2,  3,  0,  6, -2, -2,  6],
     [ 2,  3,  4,  3,  1,  6,  4,  5,  6,  6,  0,  7,  1, -2, -2,  6],
     [ 4,  4, -2,  0, -1, -1,  6,  7,  6,  1,  4,  7, -1, -2,  3,  4],
     [ 7,  4,  3,  2,  2,  7,  7,  3,  7,  5,  1,  4,  5,  3, -2, -1],
     [ 4, -2,  3,  0, -1,  2,  1,  2,  0,  5,  6,  4, -1,  5, -2,  5],
     [ 4,  0,  1,  3, -1,  5, -2,  6,  4,  0,  7,  3,  7,  1,  6,  5],
     [ 4,  5,  5, -1, -2,  1,  2,  0,  1,  2,  0,  5,  7,  4,  5,  0],
     [-2,  7,  0, -1,  5,  5,  1,  0,  0, -1,  7,  7,  5,  6,  2, -1],
     [ 0, -2,  5,  3,  7, -2, -2,  4,  4,  6, -1,  7, -1, -2, -1,  2],
     [ 2,  3,  2,  5,  4,  1,  3,  4,  1,  4,  3,  1,  7,  6,  2,  2],
     [ 3,  7,  1, -1,  6,  6, -1, -2, -1,  2,  0,  1,  4,  3,  4, -2],
     [ 5,  4,  4,  4,  3,  4,  5,  5, -2, -1,  5,  4, -2,  0,  3, -1],
     [ 0,  5, -2,  4,  0,  7,  4,  4,  3, -2,  5,  5,  2,  0, -2,  7],
     [ 2,  2,  7,  4, -1,  0,  2,  3,  0,  4,  7, -1,  7, -2,  6,  6]]

# Imprimiendo #
print("* Matriz A *")
for fila in A:
    print(fila)
print("* Matriz B *")
for fila in B:
    print(fila)
    
# Solucion
tiempoIni = time.time()
C = multiMatrices(f1, c1, A, f2, c2, B)

if len(C) != 0:
    print("* Matriz C *")
    for fila in C:
        print(fila)
else:
    print("No se puede multiplicar.")
tiempoFin = time.time() - tiempoIni


print("\n*Tiempo de ejecucion", tiempoFin, " *")
